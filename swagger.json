{"swagger": "2.0", "basePath": "/REST/nominatimWrapper/v0.1", "paths": {"/batch": {"post": {"responses": {"204": {"description": "No result at all"}, "200": {"description": "Found some results for at least one address"}, "500": {"description": "Internal Server error"}, "400": {"description": "Error in arguments"}}, "summary": "Geocode all addresses in csv like file", "description": "Returns\n-------\nA json dictionary of the shape {'match': [<list of dictionaries>]} containing geocoded addresses. Depending of parameter \"mode\", following fields could be found:\nIn 'long' mode, each record will contain the following blocs:\n\n- input : all columns present in input data, but at least \"addrKey\", \"streetName\", \"houseNumber\", \"postCode\", \"city\", \"country\"\n- output: consolidated result of geocoding :\n    - streetName: first non null value in [\"road\", \"pedestrian\",\"footway\", \"cycleway\", \"path\", \"address27\", \"construction\", \"hamlet\", \"park\"]\n    - houseNumber: house_number\n    - postCode: postcode\n    - city: first non null value in [\"town\", \"village\", \"city_district\", \"county\", \"city\"],\n    - country: country\n    - other: concatenate all values which were not picked by one of the above item\n    - inHouseNumber: equivalent to input->houseNumber\n    - lpostHouseNumber: \"housenumber\" provided by libpostal receiving concatenation of street and house number (from input)\n    - lpostUnit: \"unit\"  provided by libpostal receiving concatenation of street and house number (from input)\n- work: some metadata describing geocoding process:\n    - transformedAddress: what address (after possibly some sequence of transformations) is actually sent to Nominatim\n    - method: which transformation methods were used before sending the address to Nominatim. If the address was found without any transformation, will be \"orig\" (or \"fast\")\n    - osmOrder: what was the rank of this result in Nominatim result (more usefull in 'rejected' part)\n    - retryOn_26: If placeRank in match record is below 30 and housenumber (in input) contains other characters than digits, we retry to call Nominatim by only considering the first digits of housenumber: \"30A\",\"30.3\", \"30 bt 2\", \"30-32\" become \"30\". If it gives a result with place_rank = 30, we keep it (in this case, a \"cleansedHouse\" appears in the output, with \"30\" in this example), and this field is set to \"True\"\n- nominatim: selection of fields received from Nominatim:\n    - lat\n    - lon\n    - placeRank\n    - displayName\n    - all fields in the \"address\" bloc\n- check:  Check results indicators (if checkResult='yes'):\n    - SIMStreetWhich\n    - SIMStreet\n    - SIMCity\n    - SIMZip\n    - SIMHouseNumber\n\nIn 'geo' mode: only 'lat', 'lon', and 'placeRank' values from 'nominatim', 'addrKey' from 'input', and 'method' from 'work'\n\nIn 'short' mode: idem as 'geo', plus full 'output' bloc\n\n\nIf \"withRejected=yes\", an additional field 'rejected' with all rejected records is added, with the same field selection as above, according to \"mode\", plus one additional fields, 'rejectReason'. Equal to:\n- 'mismatch' if 'checkResult=yes', and this result is \"too far away\" from the original value\n- 'tail' if it was just not the first record.", "operationId": "post_batch", "parameters": [{"name": "csv file", "in": "formData", "type": "file", "description": "\nA CSV file with the following columns:\n\n- streetName\n- houseNumber\n- postCode\n- city\n- country\n- addrKey (must be unique)"}, {"name": "mode", "in": "query", "type": "string", "description": "\nSelection of columns in the ouput :\n\n- geo: only return lat/long\n- short: return lat/long, cleansed address (street, number, zipcode, city, country)\n- long: return all results from Nominatim", "default": "short", "enum": ["geo", "short", "long"]}, {"name": "withRejected", "in": "query", "type": "string", "description": "if \"yes\", rejected results are returned", "default": "no", "enum": ["yes", "no"]}, {"name": "checkResult", "in": "query", "type": "string", "description": "if \"yes\", will \"double check\" OSM results", "default": "no", "enum": ["yes", "no"]}, {"name": "structOsm", "in": "query", "type": "string", "description": "if \"yes\", will call the structured version of OSM", "default": "no", "enum": ["yes", "no"]}, {"name": "extraHouseNumber", "in": "query", "type": "string", "description": "if \"yes\", will call libpostal on all addresses to get the house number", "default": "yes", "enum": ["yes", "no"]}], "consumes": ["multipart/form-data"], "tags": [""]}}, "/health": {"get": {"responses": {"200": {"description": "Service is \"UP\" or \"DEGRADED\""}, "503": {"description": "Service is \"DOWN\""}, "500": {"description": "Internal Server error"}}, "summary": "Health status", "description": "Returns\n-------\n- {'status': 'DOWN'}: Nominatim server does not answer (or gives an unexpected answer)\n- {'status': 'DEGRADED'}: Either Libpostal or Photon is down (or gives an unexpected answer). Geocoding is still possible as long as it does not requires one of those transformers\n- {'status': 'UP'}: Service works correctly", "operationId": "get_health", "tags": [""]}}, "/search": {"get": {"responses": {"204": {"description": "No address found, even rejected"}, "200": {"description": "Found a match for this address (or some rejected addresses)"}, "500": {"description": "Internal Server error"}, "400": {"description": "Error in arguments"}}, "summary": "Geocode a single address", "description": "Returns\n-------\nReturns a dictionary with 2 parts. Depending of parameter \"mode\", various fields could be found.\n\nIn 'long' mode, each record will contain the following blocs:\n\n- match: a single result, with the following blocs:\n    - input : all columns present in input data, but at least \"addrKey\" (if provided), \"streetName\", \"houseNumber\", \"postCode\", \"city\", \"country\"\n    - output: consolidated result of geocoding :\n        - streetName: first non null value in [\"road\", \"pedestrian\",\"footway\", \"cycleway\", \"path\", \"address27\", \"construction\", \"hamlet\", \"park\"]\n        - houseNumber: house_number\n        - postCode: postcode\n        - city: first non null value in [\"town\", \"village\", \"city_district\", \"county\", \"city\"],\n        - country: country\n        - other: concatenate all values which were not picked by one of the above item\n        - inHouseNumber: equivalent to input->houseNumber\n        - lpostHouseNumber: \"housenumber\" provided by libpostal receiving concatenation of street and house number (from input)\n        - lpostUnit: \"unit\"  provided by libpostal receiving concatenation of street and house number (from input)\n    - work: some metadata describing geocoding process:\n        - transformedAddress: what address (after possibly some sequence of transformations) is actually sent to Nominatim\n        - method: which transformation methods were used before sending the address to Nominatim. If the address was found without any transformation, will be \"orig\" (or \"fast\")\n        - osmOrder: what was the rank of this result in Nominatim result (more usefull in 'rejected' part)\n        - retryOn_26: If placeRank in match record is below 30 and housenumber (in input) contains other characters than digits, we retry to call Nominatim by only considering the first digits of housenumber: \"30A\",\"30.3\", \"30 bt 2\", \"30-32\" become \"30\". If it gives a result with place_rank = 30, we keep it (in this case, a \"cleansedHouseNumber\" appears in the output, with \"30\" in this example), and this field is set to \"True\"\n    - nominatim: selection of fields received from Nominatim:\n        - lat\n        - lon\n        - placeRank\n        - displayName\n        - all fields in the \"address\" bloc\n    - check:  Check results indicators (if checkResult='yes'):\n        - SIMStreetWhich\n        - SIMStreet\n        - SIMCity\n        - SIMZip\n        - SIMHouseNumber\n\n- reject: list of rejected results, with most of the same fields, with additionnal fields:\n     - rejectReason: 'mismatch\" or \"tail\"\n     - distToMatch: distance (in kilometer) to the result given in \"match\"\n\nIn 'geo' mode: only 'lat', 'lon', and 'placeRank' values from 'nominatim', 'addrKey' from 'input', and 'method' from 'work'\n\nIn 'short' mode: idem as 'geo', plus full 'output' bloc", "operationId": "get_search", "parameters": [{"name": "streetName", "in": "query", "type": "string", "description": "Street name"}, {"name": "houseNumber", "in": "query", "type": "string", "description": "House number"}, {"name": "city", "in": "query", "type": "string", "description": "City name"}, {"name": "postCode", "in": "query", "type": "string", "description": "Postal code"}, {"name": "country", "in": "query", "type": "string", "description": "Country name"}, {"name": "addrKey", "in": "query", "type": "string", "description": "Address key (optional, simply copied in output)"}, {"name": "fullAddress", "in": "query", "type": "string", "description": "Full address in a single field"}, {"name": "mode", "in": "query", "type": "string", "description": "\nSelection of columns in the ouput :\n\n- geo: only return lat/long\n- short: return lat/long, cleansed address (street, number, zipcode, city, country)\n- long: return all results from Nominatim", "default": "short", "enum": ["geo", "short", "long"]}, {"name": "withRejected", "in": "query", "type": "string", "description": "If \"yes\", rejected results are returned", "default": "no", "enum": ["yes", "no"]}, {"name": "checkResult", "in": "query", "type": "string", "description": "If \"yes\", will \"double check\" OSM results", "default": "no", "enum": ["yes", "no"]}, {"name": "structOsm", "in": "query", "type": "string", "description": "If \"yes\", will call the structured version of OSM", "default": "no", "enum": ["yes", "no"]}, {"name": "extraHouseNumber", "in": "query", "type": "string", "description": "If \"yes\", will call libpostal on all addresses to get the house number", "default": "yes", "enum": ["yes", "no"]}], "tags": [""]}, "post": {"responses": {"204": {"description": "No address found, even rejected"}, "200": {"description": "Found a match for this address (or some rejected addresses)"}, "500": {"description": "Internal Server error"}, "400": {"description": "Error in arguments"}}, "summary": "Cf GET version", "operationId": "post_search", "parameters": [{"name": "streetName", "in": "query", "type": "string", "description": "Street name"}, {"name": "houseNumber", "in": "query", "type": "string", "description": "House number"}, {"name": "city", "in": "query", "type": "string", "description": "City name"}, {"name": "postCode", "in": "query", "type": "string", "description": "Postal code"}, {"name": "country", "in": "query", "type": "string", "description": "Country name"}, {"name": "addrKey", "in": "query", "type": "string", "description": "Address key (optional, simply copied in output)"}, {"name": "fullAddress", "in": "query", "type": "string", "description": "Full address in a single field"}, {"name": "mode", "in": "query", "type": "string", "description": "\nSelection of columns in the ouput :\n\n- geo: only return lat/long\n- short: return lat/long, cleansed address (street, number, zipcode, city, country)\n- long: return all results from Nominatim", "default": "short", "enum": ["geo", "short", "long"]}, {"name": "withRejected", "in": "query", "type": "string", "description": "If \"yes\", rejected results are returned", "default": "no", "enum": ["yes", "no"]}, {"name": "checkResult", "in": "query", "type": "string", "description": "If \"yes\", will \"double check\" OSM results", "default": "no", "enum": ["yes", "no"]}, {"name": "structOsm", "in": "query", "type": "string", "description": "If \"yes\", will call the structured version of OSM", "default": "no", "enum": ["yes", "no"]}, {"name": "extraHouseNumber", "in": "query", "type": "string", "description": "If \"yes\", will call libpostal on all addresses to get the house number", "default": "yes", "enum": ["yes", "no"]}], "tags": [""]}}}, "info": {"title": "NominatimWrapper API", "version": "0.1", "description": "A geocoder built upon Nominatim.\n\n          Source available on: https://github.com/SmalsResearch/NominatimWrapper/\n\n          "}, "produces": ["application/json"], "consumes": ["application/json"], "tags": [{"name": "", "description": "Main namespace"}], "responses": {"ParseError": {"description": "When a mask can't be parsed"}, "MaskError": {"description": "When any error occurs on mask"}}}
