{"swagger": "2.0", "basePath": "/REST/nominatimWrapper/v1.0", "paths": {"/batchGeocode": {"post": {"responses": {"200": {"description": "Found some results for at least one address", "schema": {"$ref": "#/definitions/geocodeBatchOutput"}}, "204": {"description": "No result at all"}, "500": {"description": "Internal Server error"}, "400": {"description": "Error in arguments"}}, "summary": "Geocode (postal address cleansing and conversion into geographical coordinates) all addresses in list", "description": "Fields available in output will depends upon parameter \"mode\" (see 'mode:xx' in response model)", "operationId": "post_batch_geocode", "parameters": [{"name": "mode", "in": "query", "type": "string", "description": "\nSelection of columns in the ouput :\n\n- geo: only return lat/long\n- short: return lat/long, cleansed address (street, number, zipcode, postname, country)\n- long: return all results from Nominatim", "default": "short", "enum": ["geo", "short", "long"]}, {"name": "withRejected", "in": "query", "type": "boolean", "description": "if \"true\", rejected results are returned", "default": false, "enum": [true, false]}, {"name": "checkResult", "in": "query", "type": "boolean", "description": "if \"true\", will \"double check\" OSM results", "default": false, "enum": [true, false]}, {"name": "structOsm", "in": "query", "type": "boolean", "description": "if \"true\", will call the structured version of OSM", "default": false, "enum": [true, false]}, {"name": "extraHouseNumber", "in": "query", "type": "boolean", "description": "if \"true\", will call libpostal on all addresses to get the house number", "default": true, "enum": [true, false]}, {"name": "payload", "required": true, "in": "body", "schema": {"$ref": "#/definitions/inputAddresses"}}, {"name": "X-Fields", "in": "header", "type": "string", "format": "mask", "description": "An optional fields mask"}], "tags": [""]}}, "/geocode": {"post": {"responses": {"200": {"description": "Found a match for this address (or some rejected addresses)", "schema": {"$ref": "#/definitions/geocodeOutput"}}, "204": {"description": "No address found, even rejected"}, "500": {"description": "Internal Server error"}, "400": {"description": "Error in arguments"}}, "summary": "Geocode (postal address cleansing and conversion into geographical coordinates) a single address", "description": "Fields available in output will depends upon parameter \"mode\" (see 'mode:xx' in response model)", "operationId": "post_geocode", "parameters": [{"name": "mode", "in": "query", "type": "string", "description": "\nSelection of columns in the ouput :\n\n- geo: return mainly lat/long\n- short: return lat/long, cleansed address (street, number, postcode, city, country)\n- long: return all results from Nominatim", "default": "short", "enum": ["geo", "short", "long"]}, {"name": "withRejected", "in": "query", "type": "boolean", "description": "If \"true\", rejected results are returned", "default": false, "enum": [true, false]}, {"name": "checkResult", "in": "query", "type": "boolean", "description": "If \"true\", will \"double check\" OSM results", "default": false, "enum": [true, false]}, {"name": "structOsm", "in": "query", "type": "boolean", "description": "If \"true\", will call the structured version of OSM", "default": false, "enum": [true, false]}, {"name": "extraHouseNumber", "in": "query", "type": "boolean", "description": "If \"true\", will call libpostal on all addresses to get the house number (cf lpostHouseNumber and lpostUnit fields in output bloc of output)", "default": true, "enum": [true, false]}, {"name": "payload", "required": true, "in": "body", "schema": {"$ref": "#/definitions/inputAddress"}}, {"name": "X-Fields", "in": "header", "type": "string", "format": "mask", "description": "An optional fields mask"}], "tags": [""]}}, "/health": {"get": {"responses": {"200": {"description": "Service is \"UP\" or \"DEGRADED\""}, "503": {"description": "Service is \"DOWN\""}, "500": {"description": "Internal Server error"}}, "summary": "Health status", "description": "Returns\n-------\n- {'status': 'DOWN'}: Nominatim server does not answer (or gives an unexpected answer)\n- {'status': 'DEGRADED'}: Either Libpostal or Photon is down (or gives an unexpected answer). Geocoding is still possible as long as it does not requires one of those transformers\n- {'status': 'UP'}: Service works correctly", "operationId": "get_health", "tags": [""]}}}, "info": {"title": "NominatimWrapper API", "version": "1.0.0", "description": "A service that allows geocoding (postal address cleansing and conversion into geographical coordinates), based on Nominatim (OpenStreetMap).\n\n          Source available on: https://github.com/SmalsResearch/NominatimWrapper/\n\n          ", "contact": {"name": "Vandy BERTEN", "email": "vandy.berten@smals.be", "url": "https://www.smalsresearch.be/author/berten/"}}, "produces": ["application/json"], "consumes": ["application/json"], "tags": [{"name": "", "description": "Main namespace"}], "definitions": {"inputAddress": {"properties": {"address": {"$ref": "#/definitions/singleAddress"}}, "type": "object"}, "singleAddress": {"properties": {"addrKey": {"type": "string", "example": "1"}, "streetName": {"type": "string", "description": "The name of a passage or way through from one location to another (cf. Fedvoc).", "example": "Avenue Fonsny"}, "houseNumber": {"type": "string", "description": "An official alphanumeric code assigned to building units, mooring places, stands or parcels (cf. Fedvoc)", "example": "20"}, "postCode": {"type": "string", "description": "The post code (a.k.a postal code, zip code etc.) (cf. Fedvoc)", "example": "1160"}, "postName": {"type": "string", "description": "Name with which the geographical area that groups the addresses for postal purposes can be indicated, usually the city (cf. Fedvoc).", "example": "Bruxelles"}, "countryName": {"type": "string", "description": "The country of the address, expressed in natural language, possibly with errors (cf. Fedvoc)", "example": "Belgium"}}, "type": "object"}, "geocodeOutput": {"properties": {"match": {"type": "array", "description": "A list with a single result", "items": {"$ref": "#/definitions/cleansedAddress"}}, "rejected": {"type": "array", "description": "A list of rejected results (only if 'withRejected' is True)", "items": {"$ref": "#/definitions/cleansedAddress"}}}, "type": "object"}, "cleansedAddress": {"properties": {"metadata": {"description": "Information describing the geocoding process", "allOf": [{"$ref": "#/definitions/outputMetadata"}]}, "output": {"description": "Geocoding result (standardized address and geographical coordinates)", "allOf": [{"$ref": "#/definitions/outputOutput"}]}, "check": {"description": "Similarity between input address and result (only if mode=long and checkResult=true). If checkResult=true, result are eliminated if (SIMZip = 0 and SimCity < 0.5) or (SIMStreet < 0.5)", "allOf": [{"$ref": "#/definitions/outputChecks"}]}}, "type": "object"}, "outputMetadata": {"properties": {"method": {"type": "string", "description": "Which transformation methods were used before sending the address to Nominatim. If the address was found without any transformation, will be 'orig' (or 'fast') (mode:all)", "example": "libpostal+regex[lpost]"}, "addrKey": {"type": "string", "description": "Copied from input (mode:all)", "example": "1"}, "placeRank": {"type": "string", "description": "'placeRank' field from Nominatim. 26: street level, 30: building level (mode:all)", "example": "30"}, "placeId": {"type": "string", "description": "Nominatim identifier (mode:short,full)", "example": "182128"}, "rejectReason": {"type": "string", "description": "'mismatch' (only if checkResult is set to 'true') or 'tail' (only in 'rejected' bloc) (mode:all)", "example": "tail"}, "distToMatch": {"type": "number", "description": "Distance (in kilometer) to the result given in 'match' (only in 'rejected' bloc) (mode:short,full)", "example": 0.1}, "transformedAddress": {"type": "string", "description": "What address (after possibly some sequence of transformations) is actually sent to Nominatim (mode:full)", "example": "Avenue Fonsny, 20, 1060 Bruxelles"}, "osmOrder": {"type": "integer", "description": "What was the rank of this result in Nominatim result (more useful in 'rejected' part) (mode:full)", "example": 0}, "retryOn26": {"type": "boolean", "description": "If placeRank in match record is below 30 and housenumber (in input) contains other characters than digits, we retry to call Nominatim by only considering the first digits of housenumber: '30A','30.3', '30 bt 2', '30-32' become '30'. If it gives a result with place_rank = 30, we keep it (in this case, a 'cleansedHouseNumber' appears in the output, with '30' in this example), and this field is set to 'True') (mode:full)", "example": true}, "cleansedHouseNumber": {"type": "string", "description": "Cf retryOn26 (mode:full)", "example": "30"}}, "type": "object"}, "outputOutput": {"properties": {"streetName": {"type": "string", "description": "first non null value in [\"road\", \"pedestrian\",\"footway\", \"cycleway\", \"path\", \"address27\", \"construction\", \"hamlet\", \"park\", \"square\"] from nominatim result. (mode:short,full)", "example": "Avenue Fonsny - Fonsnylaan"}, "houseNumber": {"type": "string", "description": "house_number from nominatim result (mode:short,full)", "example": "20"}, "postCode": {"type": "string", "description": "postcode from nominatim result (mode:short,full)", "example": "1060"}, "postName": {"type": "string", "description": "First non null value in [\"town\", \"village\", \"city_district\", \"county\", \"city\"] from nominatim result (mode:short,full)", "example": "Saint-Gilles - Sint-Gillis"}, "countryName": {"type": "string", "description": "country from nominatim result. (mode:short,full)", "example": "Belgi\u00eb / Belgique / Belgien"}, "displayName": {"type": "string", "description": "display_name nominatim result (mode:short,full)", "example": "20, Avenue Fonsny - Fonsnylaan, Saint-Gilles - Sint-Gillis, Brussel-Hoofdstad - Bruxelles-Capitale, R\u00e9gion de Bruxelles-Capitale - Brussels Hoofdstedelijk Gewest, 1060, Belgi\u00eb / Belgique / Belgien"}, "other": {"type": "string", "description": "Concatenate all values which were not picked by one of the above item (mode:short,full)", "example": ""}, "lpostHouseNumber": {"type": "string", "description": "\"housenumber\" provided by libpostal receiving concatenation of street and house number (from input) (if extraHouseNumber = true ; mode:short,full)", "example": "20"}, "lpostUnit": {"type": "string", "description": "\"unit\"  provided by libpostal receiving concatenation of street and house number (from input) (if extraHouseNumber = true ; mode:short,full)", "example": "box 2"}, "lat": {"type": "number", "description": "Latitude, in EPSG:4326. Angular distance from some specified circle or plane of reference (mode:all)", "example": 50.8358677}, "lon": {"type": "number", "description": "Longitude, in EPSG:4326. Angular distance measured on a great circle of reference from the intersection of the adopted zero meridian with this reference circle to the similar intersection of the meridian passing through the object (mode:all)", "example": 4.3385087}}, "type": "object"}, "outputChecks": {"properties": {"SIMStreetWhich": {"type": "string", "description": "Which field in Nominatim was compared to input street name. Could be street_name (cf streetName output bloc), other (one element in other from output bloc), alt_names (name found in parent node), namedetails (usually a translation of the street name)", "example": "street_name"}, "SIMStreet": {"type": "number", "description": "Comparison score between input street name and the best item in the field given by SIMStreetWhich. Score is the maximum between Levenshtein distance (after removing common street name words in french/dutch, such as avenue, steenweg...) and an inclusion test (check that a string s1 is equal to another string s2, except that s2 contains an additional substring)", "example": 0.8}, "SIMCity": {"type": "number", "description": "Levenshtein distances between in/out city names", "example": 0.8}, "SIMZip": {"type": "number", "description": "Similarity between in/out postcode: 1 if both equal, 0.5 if two first digits are equal, 0 otherwise", "example": 1.0}, "SIMHouseNumber": {"type": "number", "description": "Similarity between house numbers. 1 if perfect (non empty) match, 0.8 on range match (10 vs 8-10 or 10-12), 0.5 on number match (10A vs 10)", "example": 1.0}}, "type": "object"}, "inputAddresses": {"properties": {"addresses": {"type": "array", "items": {"$ref": "#/definitions/singleAddress"}}}, "type": "object"}, "geocodeBatchOutput": {"properties": {"match": {"type": "array", "description": "A list with all results", "items": {"$ref": "#/definitions/cleansedAddress"}}, "rejected": {"type": "array", "description": "A list of rejected results (only if 'withRejected' is True)", "items": {"$ref": "#/definitions/cleansedAddress"}}}, "type": "object"}}, "responses": {"ParseError": {"description": "When a mask can't be parsed"}, "MaskError": {"description": "When any error occurs on mask"}}}
